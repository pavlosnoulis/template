#!/bin/make

##################################################
# Make config
##################################################
SHELL:=/bin/bash
.DEFAULT_GOAL:= all
.DELETE_ON_ERROR:
.EXPORT_ALL_VARIABLES:
.SECONDEXPANSION:
.ONESHELL:

##################################################
# App description
##################################################
pkg_name							= IN_PKG_NAME
pkg_tarname						= IN_PKG_TARNAME
pkg_distname					= IN_PKG_DISTNAME
pkg_version						= IN_PKG_VERSION
pkg_vversion					= IN_PKG_VVERSION
pkg_homepage					= IN_PKG_HOMEPAGE
pkg_bugreport					= IN_PKG_BUGREPORT
pkg_repository				= IN_PKG_REPOSITORY

##################################################
# Program name transformation
##################################################
program_name					= IN_PROGRAM_NAME
program_vname					= IN_PROGRAM_VNAME

##################################################
# Build directories
##################################################
buildir								= IN_BUILDIR
buildir_abs						= IN_BUILDIR_ABS
srcdir_top						= IN_SRCDIR
srcdir_top_abs				= IN_SRCDIR_ABS
srcdir								= $(srcdir_top)/src
srcdir_abs						= $(srcdir_top_abs)/src

##################################################
# Installation directories
##################################################
# gnu prefix directories
prefix								= IN_PREFIX
exec_prefix						= IN_EXEC_PREFIX
sbindir								= IN_SBINDIR
libexecdir						= IN_LIBEXECDIR
datarootdir						= IN_DATAROOTDIR
datadir								= IN_DATADIR
sysconfdir						= IN_SYSCONFDIR
sharedstatedir				= IN_SHAREDSTATEDIR
localstatedir					= IN_LOCALSTATEDIR
runstatedir						= IN_RUNSTATEDIR
includedir						= IN_INCLUDEDIR
oldincludedir					= IN_OLDINCLUDEDIR
docdir								= IN_DOCDIR
infodir								= IN_INFODIR
htmldir								= IN_HTMLDIR
dvidir								= IN_DVIDIR
pdfdir								= IN_PDFDIR
psdir									= IN_PSDIR
libdir								= IN_LIBDIR
localedir							= IN_LOCALEDIR
mandir								= IN_MANDIR
# Derived directories
tmpdir								= IN_TMPDIR
tmpdir_persistent			= IN_TMPDIR_PERSISTENT
statedir							= IN_STATEDIR
cachedir							= IN_CACHEDIR
logdir								= IN_LOGDIR
spooldir							= IN_SPOOLDIR
lockdir								= IN_LOCKDIR
desktopdir						= IN_DESKTOPDIR
icondir								= IN_ICONDIR
metainfodir						= IN_METAINFODIR
# stems
buildir_stem					= IN_BUILDIR_STEM
distdir_stem					= IN_DISTDIR_STEM
confdir_stem					= IN_CONFDIR_STEM

##################################################
# Important files
##################################################
configfile=$(srcdir_top)/configure
releasefile=$(srcdir_top)/RELEASE
pkgjsonfile=$(srcdir_top)/package.json
template_in=template.sh
template_out=IN_TEMPLATE_BIN_NAME

##################################################
# Tools and their configurations
##################################################
# dotenv
dotenv=IN_DOTENV
dotenvdirs:=IN_CONFIG_ENVFILE $(srcdir_top)
dotenvfile:=$(srcdir_top_abs)/.env
loadenv=set -a; source $(dotenvfile)
# jq
jq:=IN_JQ
# Bump version
bumpve=$(scriptdir)/bumpve.sh

##################################################
# Default target
##################################################
all: build

##################################################
# Build
##################################################
build: $(buildir)/$(template_out) | $(buildir_abs)

$(buildir)/$(template_out): $(srcdir)/$(template_in)
	cat $^ > $@
	chmod +x $@

##################################################
# Release
##################################################
release:
	$(scriptdir)/release.sh

##################################################
# Distribute
##################################################
dist: archive?=zip
dist: dist.$$(archive)

dist.tar: $(src_distribution).tar.gz
dist.zip: $(src_distribution).zip

$(src_distribution).tar.gz: $(src_distribution)
	cd $(distdir)
	tar --create --dereference --file=- $(pkg_distname)+src  \
	| gzip --to-stdout --best - > $(pkg_distname)+src.tar.gz

$(src_distribution).zip: $(src_distribution)
	cd $(distdir)
	zip -r - $(pkg_distname)+src > $(pkg_distname)+src.zip

$(src_distribution):
	-mkdir -p $(src_distribution) &>/dev/null
	for file in $(shell git ls-files --exclude-standard --cached); do
			dirname=$${file%/*}
			[ -d $${dirname} ] && mkdir -p $(src_distribution)/$${dirname}
			ln --force --physical $${file} $(src_distribution)/$${dirname}
	done

##################################################
# Package
##################################################
package: archive?=zip
package: package.$$(archive)

package.tar: $(bin_distribution).tar.gz
package.zip: $(bin_distribution).zip

$(bin_distribution).tar.gz: $(bin_distribution)
	cd $(distdir)
	tar --create --dereference --file=- $(pkg_distname)+bin \
	| gzip --to-stdout --best - > $(pkg_distname)+bin.tar.gz

$(bin_distribution).zip: $(bin_distribution)
	cd $(distdir)
	zip -r - $(pkg_distname)+bin > $(pkg_distname)+bin.zip

$(bin_distribution): build
	-mkdir -p $(bin_distribution) &>/dev/null
	cp -r $(buildir)/* $(bin_distribution)
	cp $$releasefile $(bin_distribution)
	cp $$pkgjsonfile $(bin_distribution)

##################################################
# Install
##################################################
install: 

##################################################
# Uninstall
##################################################
uninstall:

##################################################
# Update
##################################################
update:

##################################################
# clean
##################################################
clean:
	-rm -f *.tar.gz
	-rm -f $(dotenvfile)
	-rm -f $(buildir)/$(template_out)
	-rm -rf $(distdir)

##################################################
# distclean
##################################################
distclean: clean
	-rm -f *.log
	-rm -f .#*
	-rm -f config.*
	-rm -f ./Makefile

##################################################
# misc
##################################################
.DEFAULT:
	@if [ ! -f "$<" ]; then
	echo "Missing file $${file:-}"
	exit 1
	fi

##################################################
# directories
##################################################
$(buildir_abs):
	mkdir -p $@

##################################################
# help
##################################################
help:
	@cat ./Makefile | grep -i --color=auto 'phony' | cut -d ' ' -f2- | tail --lines=+3

# Software development
.PHONY: run # Read dotenvfile and run $target or tmp/scratch.js
.PHONY: build # Build application
.PHONY: test # Test application
# Software distribution
.PHONY: release # Create a new version
.PHONY: dist # Distribute source tree
.PHONY: package # Distribute build
# Software package
.PHONY: install # Install package
.PHONY: uninstall # Uninstall package
.PHONY: update # Update package
# Cleaning
.PHONY: clean # Remove files created by ./make
.PHONY: distclean # Remove files created by ./configure
# Misc
.PHONY: help # Display a short description about each Makefile target's function
.PHONY: dotenv # Write environment into .env
.PHONY: all # Default target
